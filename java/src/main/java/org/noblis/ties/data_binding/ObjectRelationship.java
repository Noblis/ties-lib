// Generated by delombok at Tue Apr 30 16:25:30 EDT 2019
/*
 * Copyright 2019 Noblis, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.noblis.ties.data_binding;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.List;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({"linkageMemberIds", "linkageDirectionality", "linkageType", "linkageAssertionId", "otherInformation"})
public class ObjectRelationship {
    @JsonProperty("linkageMemberIds")
    private List<String> linkageMemberIds = null;
    @JsonProperty("linkageDirectionality")
    private LinkageDirectionality linkageDirectionality;
    @JsonProperty("linkageType")
    private String linkageType;
    @JsonProperty("linkageAssertionId")
    private String linkageAssertionId;
    @JsonProperty("otherInformation")
    private List<OtherInformation> otherInformation = null;


    public enum LinkageDirectionality {
        @JsonProperty("DIRECTED")
        DIRECTED, @JsonProperty("BIDIRECTED")
        BIDIRECTED, @JsonProperty("UNDIRECTED")
        UNDIRECTED;
    }

    @java.lang.SuppressWarnings("all")
    public ObjectRelationship() {
    }

    @java.lang.SuppressWarnings("all")
    public ObjectRelationship(final List<String> linkageMemberIds, final LinkageDirectionality linkageDirectionality, final String linkageType, final String linkageAssertionId, final List<OtherInformation> otherInformation) {
        this.linkageMemberIds = linkageMemberIds;
        this.linkageDirectionality = linkageDirectionality;
        this.linkageType = linkageType;
        this.linkageAssertionId = linkageAssertionId;
        this.otherInformation = otherInformation;
    }

    @java.lang.SuppressWarnings("all")
    public List<String> getLinkageMemberIds() {
        return this.linkageMemberIds;
    }

    @java.lang.SuppressWarnings("all")
    public LinkageDirectionality getLinkageDirectionality() {
        return this.linkageDirectionality;
    }

    @java.lang.SuppressWarnings("all")
    public String getLinkageType() {
        return this.linkageType;
    }

    @java.lang.SuppressWarnings("all")
    public String getLinkageAssertionId() {
        return this.linkageAssertionId;
    }

    @java.lang.SuppressWarnings("all")
    public List<OtherInformation> getOtherInformation() {
        return this.otherInformation;
    }

    @java.lang.SuppressWarnings("all")
    public void setLinkageMemberIds(final List<String> linkageMemberIds) {
        this.linkageMemberIds = linkageMemberIds;
    }

    @java.lang.SuppressWarnings("all")
    public void setLinkageDirectionality(final LinkageDirectionality linkageDirectionality) {
        this.linkageDirectionality = linkageDirectionality;
    }

    @java.lang.SuppressWarnings("all")
    public void setLinkageType(final String linkageType) {
        this.linkageType = linkageType;
    }

    @java.lang.SuppressWarnings("all")
    public void setLinkageAssertionId(final String linkageAssertionId) {
        this.linkageAssertionId = linkageAssertionId;
    }

    @java.lang.SuppressWarnings("all")
    public void setOtherInformation(final List<OtherInformation> otherInformation) {
        this.otherInformation = otherInformation;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ObjectRelationship)) return false;
        final ObjectRelationship other = (ObjectRelationship) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$linkageMemberIds = this.getLinkageMemberIds();
        final java.lang.Object other$linkageMemberIds = other.getLinkageMemberIds();
        if (this$linkageMemberIds == null ? other$linkageMemberIds != null : !this$linkageMemberIds.equals(other$linkageMemberIds)) return false;
        final java.lang.Object this$linkageDirectionality = this.getLinkageDirectionality();
        final java.lang.Object other$linkageDirectionality = other.getLinkageDirectionality();
        if (this$linkageDirectionality == null ? other$linkageDirectionality != null : !this$linkageDirectionality.equals(other$linkageDirectionality)) return false;
        final java.lang.Object this$linkageType = this.getLinkageType();
        final java.lang.Object other$linkageType = other.getLinkageType();
        if (this$linkageType == null ? other$linkageType != null : !this$linkageType.equals(other$linkageType)) return false;
        final java.lang.Object this$linkageAssertionId = this.getLinkageAssertionId();
        final java.lang.Object other$linkageAssertionId = other.getLinkageAssertionId();
        if (this$linkageAssertionId == null ? other$linkageAssertionId != null : !this$linkageAssertionId.equals(other$linkageAssertionId)) return false;
        final java.lang.Object this$otherInformation = this.getOtherInformation();
        final java.lang.Object other$otherInformation = other.getOtherInformation();
        if (this$otherInformation == null ? other$otherInformation != null : !this$otherInformation.equals(other$otherInformation)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ObjectRelationship;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $linkageMemberIds = this.getLinkageMemberIds();
        result = result * PRIME + ($linkageMemberIds == null ? 43 : $linkageMemberIds.hashCode());
        final java.lang.Object $linkageDirectionality = this.getLinkageDirectionality();
        result = result * PRIME + ($linkageDirectionality == null ? 43 : $linkageDirectionality.hashCode());
        final java.lang.Object $linkageType = this.getLinkageType();
        result = result * PRIME + ($linkageType == null ? 43 : $linkageType.hashCode());
        final java.lang.Object $linkageAssertionId = this.getLinkageAssertionId();
        result = result * PRIME + ($linkageAssertionId == null ? 43 : $linkageAssertionId.hashCode());
        final java.lang.Object $otherInformation = this.getOtherInformation();
        result = result * PRIME + ($otherInformation == null ? 43 : $otherInformation.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "ObjectRelationship(linkageMemberIds=" + this.getLinkageMemberIds() + ", linkageDirectionality=" + this.getLinkageDirectionality() + ", linkageType=" + this.getLinkageType() + ", linkageAssertionId=" + this.getLinkageAssertionId() + ", otherInformation=" + this.getOtherInformation() + ")";
    }
}
